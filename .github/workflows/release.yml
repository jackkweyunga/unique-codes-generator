name: release

on:
  workflow_call:
  workflow_dispatch:
  push:
    branches:
      - 'releases/v*'
    tags:
      - 'v*.*.*'
    paths:
      - "**.go"
      - "**.sum"
      - "**.mod"
      - "**.py"
      - "Dockerfile"

  pull_request:
    types:
      - closed
    branches:
      - 'releases/v*'
    paths:
      - "**.go"
      - "**.sum"
      - "**.mod"
      - "**.py"
      - "Dockerfile"


env:
  REGISTRY: ghcr.io
  GA_IMAGE_NAME: "${{ github.repository }}"


jobs:
  
  check-secret:
    runs-on: ubuntu-latest
    outputs:
      test-pypi-api-token: ${{ steps.test-pypi-token.outputs.defined }}
      pypi-api-token: ${{ steps.pypi-token.outputs.defined }}
    steps:
      - id: test-pypi-token
        if: "${{ env.TEST_PYPI_API_TOKEN != '' }}"
        run: echo "::set-output name=defined::true"
        env:
          TEST_PYPI_API_TOKEN: ${{ secrets.TEST_PYPI_API_TOKEN }}
      - id: pypi-token
        if: "${{ env.PYPI_API_TOKEN != '' }}"
        run: echo "::set-output name=defined::true"
        env:
          PYPI_API_TOKEN: ${{ secrets.PYPI_API_TOKEN }}

  build-upload-py-client:
    name: Build and publish Python üêç distributions üì¶ to PyPI and TestPyPI
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@master
      - name: Set up Python 3.10
        uses: actions/setup-python@v3
        with:
          python-version: "3.10"

      - name: Install pypa/build
        run: >-
          python -m
          pip install
          build
          --user

      - name: Build a binary wheel and a source tarball
        run: >-
          cd clients/python/ &&
          python -m
          build
          --sdist
          --wheel
          --outdir dist/

      - name: upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: ucg-dist
          path: clients/python/dist/

  release:
    name: release üêç distributions üì¶
    runs-on: ubuntu-latest
    needs: build-upload-py-client
    permissions:
      packages: write
      contents: write

    steps:
      - name: Download artifact
        uses: actions/download-artifact@v3
        with:
          name: ucg-dist
      - name: Test artifact
        run: ls -R
      - name: make a github release
        id: new-release
        uses: softprops/action-gh-release@v2
        if: startsWith(github.ref, 'refs/tags/')
        with:
          files: |
            *.gz
            *.whl

  publish-test-pypi:
    name: publish to test pypi
    runs-on: ubuntu-latest
    permissions:
      id-token: write

    needs: [ build-upload-py-client, check-secret ]
    if: needs.check-secret.outputs.test-pypi-api-token == 'true'
    steps:
      - name: Download artifact
        uses: actions/download-artifact@v3
        with:
          name: ucg-dist
          path: dist
      - name: Test artifact
        run: ls -R
      - name: Publish distribution üì¶ to Test PyPI
        uses: pypa/gh-action-pypi-publish@master
        with:
          password: ${{ secrets.TEST_PYPI_API_TOKEN }}
          repository_url: https://test.pypi.org/legacy/

  publish-pypi:
    name: publish to pypi
    runs-on: ubuntu-latest
    permissions:
      id-token: write

    needs: [ build-upload-py-client, check-secret ]
    if: needs.check-secret.outputs.pypi-api-token == 'true'
    steps:
      - name: Download artifact
        uses: actions/download-artifact@v3
        with:
          name: ucg-dist
          path: dist
      - name: Test artifact
        run: ls -R
      - name: Publish distribution üì¶ to PyPI
        if: startsWith(github.ref, 'refs/tags')
        uses: pypa/gh-action-pypi-publish@master
        with:
          password: ${{ secrets.PYPI_API_TOKEN }}

  build-publish-docker-image:
    name: build and push docker
    runs-on: ubuntu-latest
    permissions:
      packages: write
      contents: write

    steps:

      - name: checkout
        uses: actions/checkout@v3

      - name: Set up Docker Builds
        uses: docker/setup-buildx-action@v2

      - name: Login to Container registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@69f6fc9d46f2f8bf0d5491e4aabe0bb8c6a4678a
        with:
          images: |
            ${{ env.REGISTRY }}/${{ env.GA_IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=tag
            type=ref,event=pr
            type=sha
          flavor: |
            latest=auto
            prefix=
            suffix=

      - name: Build and push hash tagged image
        uses: docker/build-push-action@v2
        with:
          context: ./
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=registry,ref=${{ env.REGISTRY }}/${{ env.GA_IMAGE_NAME }}:latest
          cache-to: type=inline
